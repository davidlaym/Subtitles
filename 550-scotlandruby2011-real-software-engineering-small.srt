1
00:00:08,040 --> 00:00:11,170
Buenos Días, mi nombre es Glen Vanderburg

2
00:00:11,170 --> 00:00:15,320
Gracias por venir, voy a hablar sobre la Verdadera Ingeniería de Software

3
00:00:15,330 --> 00:00:20,650
Me han dicho que para la grabación del vídeo debo quedarme detrás del podio

4
00:00:20,660 --> 00:00:27,420
No estoy acostumbrado a ello, así que si camino y no me pueden oir,
por favor avísenme y me vuelvo a la posición.

5
00:00:32,600 --> 00:00:35,500
Este es un cuarto repleto de profesionales de software

6
00:00:36,360 --> 00:00:39,820
así que nadie debiera estar sorprendido de escucharme decir que

7
00:00:39,820 --> 00:00:44,840
la ingeniería de software no funciona

8
00:00:46,010 --> 00:00:47,850
Esto es ampliamente conocido en nuestro campo

9
00:00:47,850 --> 00:00:53,530
Muchos de los que fuimos educados como programadores

10
00:00:53,530 --> 00:00:57,200
pasamos por un periodo en donde se nos enseñó un conjunto de prácticas

11
00:00:57,170 --> 00:01:00,570
llamadas ingeniería de software

12
00:01:00,570 --> 00:01:02,600
Algunos habremos aprendido de esto en nuestros trabajos

13
00:01:02,600 --> 00:01:06,130
si aquel lugar le importaban ese tipo de cosas

14
00:01:07,250 --> 00:01:10,450
y es ampliamente reconocido que estas prácticas

15
00:01:10,460 --> 00:01:12,730
simplemente no funcionan en nuestro campo

16
00:01:12,560 --> 00:01:16,440
las prácticas que llamamos "Ingeniería de Software"

17
00:01:16,910 --> 00:01:18,990
aunque han cambiado con el curso del tiempo

18
00:01:18,990 --> 00:01:23,920
no controlan adecuadamente el costo del proyecto

19
00:01:23,930 --> 00:01:26,850
no son fiables para producir software de calidad

20
00:01:26,850 --> 00:01:31,690
e incluso cuando son practicadas rigurosamente por personas
que han sido entrenadas en como hacerlo

21
00:01:32,650 --> 00:01:34,520
no son exitosos en producir ningún tipo de software

22
00:01:36,930 --> 00:01:40,000
pero no debiera ser sorpresivo que esto suceda

23
00:01:41,020 --> 00:01:45,230
debido a que en cualquier otro campo que aspira al titulo de "Ingeniería"

24
00:01:45,230 --> 00:01:49,170
el término de "Ingeniería" está reservado para cosas que funcionan

25
00:01:50,880 --> 00:01:59,480
de hecho, sin considerar sub-especialidades,
esto es una excelente definición de "Ingeniería"

26
00:01:59,480 --> 00:02:06,610
Es ese grupo de prácticas y técnicas, que han sido demostradas, a través de experiencia, que funcionan fiablemente en el campo.

27
00:02:07,970 --> 00:02:12,780
Y en el desarrollo de software tenemos esta situación insostenible

28
00:02:12,780 --> 00:02:16,220
en donde tenemos un conjunto de practicas llamadas Ingeniería de software

29
00:02:16,220 --> 00:02:18,600
y cualquiera que practica desarrollo de sofware

30
00:02:18,600 --> 00:02:21,190
sabe que esas prácticas no funcionan

31
00:02:23,800 --> 00:02:28,110
Este estado de las cosas es tan extraño y alarmante

32
00:02:28,120 --> 00:02:30,980
que ha ocasionado que muchas personas se pregunten

33
00:02:30,980 --> 00:02:34,530
si la ingeniería efectivamente es una metáfora apropiada

34
00:02:34,530 --> 00:02:36,960
para el desarrollo de software

35
00:02:36,960 --> 00:02:41,540
a lo mejor, el desarrollo de software no es Ingeniería, a lo mejor
es incompatible con la Ingeniería

36
00:02:41,550 --> 00:02:49,920
a lo mejor es "Oficio", o "Arte" o "Hacer Películas" o "Creación de Teorías" o algo como eso

37
00:02:49,930 --> 00:02:54,140
y que debemos simplemente darnos por vencidos en llamar
al desarrollo de software como una "Ingeniería"

38
00:02:54,140 --> 00:02:56,120
y yo creo que eso es ridiculo

39
00:02:56,120 --> 00:02:58,880
pero es fácil de ver como llegamos a ello

40
00:02:58,880 --> 00:03:02,660
debido a que ese tipo de reacciones

41
00:03:02,660 --> 00:03:11,830
derivan de los mismos mal entendidos que, en primer lugar, llevaron al desarrollo de una visión equivocada del desarrollo de software

42
00:03:11,940 --> 00:03:15,490
las personas que crearon el campo que hoy llamamos Ingeniería de sofware

43
00:03:15,490 --> 00:03:17,790
mal entendieron dos cosas importantes

44
00:03:18,880 --> 00:03:21,110
"Desarrollo de software" e "Ingeniería"

45
00:03:21,110 --> 00:03:23,810
y el resultado es que la Ingeniería de software

46
00:03:23,810 --> 00:03:27,150
es verdaderamente una caricatura de una disciplina de Ingeniería

47
00:03:28,280 --> 00:03:34,070
así que en esta charla quiero darles un pequeño vistazo sobre que es lo que salió mal

48
00:03:34,070 --> 00:03:38,350
de como es posible que un campo completo haya ido por el camino equivocado

49
00:03:38,350 --> 00:03:43,070
y haya perseguido una visión de ingeniería que estaba equivocada desde sus raices

50
00:03:43,070 --> 00:03:49,730
y luego quiero comparar la caricatura de ingeniería que vemos en nuestro campo

51
00:03:49,730 --> 00:03:51,920
con lo que una real disciplina de Ingeniería es

52
00:03:52,560 --> 00:03:57,450
y finalmente, hablaré como la Ingeniería de software se vería

53
00:03:57,450 --> 00:03:59,900
si tuviéramos que re-inventarla

54
00:04:00,930 --> 00:04:03,670
basados en un entendimiento adecuado de lo que una Ingeniería es.

55
00:04:06,740 --> 00:04:13,960
El término "Ingeniería de Software" empezó a utilizarse en 1968
en Garmish, Alemania

56
00:04:13,960 --> 00:04:16,050
lamento que no se pueda apreciar bien, pero

57
00:04:17,360 --> 00:04:20,460
fue en una conferencia de Ingeniería de Software

58
00:04:21,750 --> 00:04:25,070
patrocinada por, aunque no lo crean,  la Organización Nor Atlántica de Tratados (NATO)

59
00:04:25,070 --> 00:04:30,770
para tratar lo que era percibido como la "crisis del software"

60
00:04:30,770 --> 00:04:34,300
nuestra falta de capacidad para administrar proyectos de software de una manera apropiada

61
00:04:34,300 --> 00:04:36,270
y producir resultados fiables

62
00:04:39,800 --> 00:04:45,210
siendo curioso sobre la ingeniería de software y cual el problema era decidí unos años atrás

63
00:04:45,210 --> 00:04:52,740
leer las actas de esta conferencia, y dada mi actitud sobre el campo de la ingeniería de software

64
00:04:52,740 --> 00:04:56,810
esperaba encontrar que este era el lugar en donde toda la confusión inició

65
00:04:58,690 --> 00:05:04,180
y fuí sorprendido y algo gratificado que no era el caso en lo absoluto,

66
00:05:04,180 --> 00:05:08,880
si Uds. leen las actas, hay un montón de cosas muy inteligentes ahí

67
00:05:08,890 --> 00:05:18,340
los participantes venían desde la Academia, de la Industria y varias organizaciones como
Laboratorios Bell que estaban entre estos dos mundos

68
00:05:20,340 --> 00:05:22,840
muchos de ellos eran profesionales del area

69
00:05:24,870 --> 00:05:31,680
y hubo una cantidad de cosas dichas en la conferencia que no hacen mucho sentido
a nuestros oídos hoy

70
00:05:31,680 --> 00:05:37,270
pero hubo un montón de cosas que si hacían mucho sentido, muchas cosas inteligentes dichas,

71
00:05:37,270 --> 00:05:49,100
por mucho, el tono prevalente de la conferencia fue que simplemente no sabemos casi nada

72
00:05:49,100 --> 00:05:53,010
acerca de software y como se desarrolla y como es que la Ingeniería de software debiera ser

73
00:05:54,730 --> 00:06:00,400
hubo una gran cantidad de incertidumbre sobre que es lo que puede significar "hacer ingeniería de software"

74
00:06:00,400 --> 00:06:02,540
y pienso que eso es muy razonable

75
00:06:02,540 --> 00:06:13,270
en 1968 el desarrollo de software era un bebé y las técnicas, herramientas y las plataformas
sobre las que se trabajaba

76
00:06:13,270 --> 00:06:15,150
estaban en una enorme inestabilidad

77
00:06:15,160 --> 00:06:17,180
y en ese contexto la incertidumbre hace mucho sentido

78
00:06:17,180 --> 00:06:23,380
al final de la conferencia, Alan Purlis habló e intentó de resumir las pocas cosas

79
00:06:23,440 --> 00:06:25,190
sobre las que habían hecho consenso

80
00:06:26,830 --> 00:06:31,910
y en aquel corto discurso habla sobre diseño iterativo

81
00:06:31,910 --> 00:06:34,110
el vocabulario es muy distinto y no lo llamó así

82
00:06:34,110 --> 00:06:37,680
pero claramente estaba hablando sobre diseño iterativo

83
00:06:37,690 --> 00:06:42,370
iniciando con un sistema que era muy pequeño y hacía casi nada

84
00:06:42,370 --> 00:06:44,060
pero funcionaba

85
00:06:44,060 --> 00:06:48,740
y gradualmente construyendo sobre eso y expandiéndolo hacia el sistema que querías tener

86
00:06:48,750 --> 00:06:52,700
y habló de guiar ese proceso mediante pruebas

87
00:06:56,750 --> 00:07:02,410
no es sorpresa que todos los que participaron en esta conferencia

88
00:07:02,410 --> 00:07:08,720
quedaron entusiasmados sobre el potencial y quisieron continuar el trabajo

89
00:07:08,730 --> 00:07:14,650
y así en 1969 hubo una segunda conferencia en Roma sobre ingeniería de software

90
00:07:14,650 --> 00:07:16,350
también patrocinada por NATO

91
00:07:17,890 --> 00:07:22,450
y si leyeran las actas, sería evidente que es en esta conferencia donde empezó la confusión

92
00:07:22,450 --> 00:07:26,120
el tono es muy distinto

93
00:07:26,120 --> 00:07:27,670
¿Que sucedió en este año?

94
00:07:30,290 --> 00:07:35,680
bueno, algunos de ustedes quizás me habrán visto dar una versión inicial de esta charla en otras partes

95
00:07:35,680 --> 00:07:43,000
y era en este punto en donde digo "bueno, no lo sé" y presentaría una explicación hilarante de que podría haber pasado

96
00:07:43,000 --> 00:07:47,790
de como la cascada se introdujo a ser la forma estándar de hacer software

97
00:07:47,790 --> 00:07:58,340
pero Zaine Bitter, escuchó mi charla, un Neozelandes, me envió un link

98
00:07:58,340 --> 00:08:02,120
a un recurso de lo más interesante, en 1996 hubo una conferencia

99
00:08:02,120 --> 00:08:05,390
sobre la historia de la ingeniería de sofware

100
00:08:05,390 --> 00:08:12,130
y un caballero llamado Brian Randell, que co-editó ambos de estos reportes

101
00:08:12,130 --> 00:08:14,760
bueno, apenas se puede ver,

102
00:08:14,770 --> 00:08:24,780
escribió una memoria sobre ambos reportes, como estuvo involucrado y su co-edición de los dos reportes de la conferencia

103
00:08:24,780 --> 00:08:30,970
y como Dave Hoover ayer, en su presentación, soy un geek de citas

104
00:08:30,970 --> 00:08:41,010
así que les ofreceré una cita extendida de la memoria de Brian Randell sobre la segunda conferencia NATO

105
00:08:41,010 --> 00:08:44,450
"Al contrario de la primera conferencia, en donde era completamente aceptado que

106
00:08:44,450 --> 00:08:48,360
el término "ingeniería de software" expresaba una necesidad  y no una realidad

107
00:08:48,360 --> 00:08:53,670
en Roma había una pequeña tendencia a hablar del tema como si ya fuera realidad.

108
00:08:55,090 --> 00:08:58,370
Y fue claro que los organizadores tenían una agenda oculta

109
00:08:58,370 --> 00:09:04,410
sobre persuadir a NATO para fundar el inicio de un instituto Internacional de Ingeniería de Software"

110
00:09:06,240 --> 00:09:13,180
Había sospechado sobre esto, pero fue sorprendente verlo confirmado tan definitivamente

111
00:09:13,180 --> 00:09:16,950
(continúa la cita) "Sin embargo, las cosas no sucedieron de acuerdo a sus planes.

112
00:09:16,950 --> 00:09:20,320
Las sesiones de discusión que estaban pensadas para proveer evidencia de soporte

113
00:09:20,330 --> 00:09:24,920
sustancial a esta propuesta, estuvieron repletas de escepticismo e incluso

114
00:09:24,920 --> 00:09:28,950
inspiró a unos de los participantes, Tom Simpson, de IBM, a escribir una espléndida sátira corta

115
00:09:29,180 --> 00:09:33,830
llamada 'Masterpirece Engineering' (Ingeniería de obra maestra)"

116
00:09:35,150 --> 00:09:37,530
que, a todo esto vale la pena buscar, es fácil de encontrar si buscan en google.

117
00:09:39,320 --> 00:09:42,010
(continúa cita) "Fue poca la sorpresa para cualquier participante en la conferencia de Roma

118
00:09:42,010 --> 00:09:45,640
que no se realizó ningún intento adicional para continuar las series de conferencias NATO

119
00:09:45,640 --> 00:09:49,960
pero la moda de la Ingeniería de software fue creciendo gracias a que mucha gente

120
00:09:49,960 --> 00:09:56,070
comenzó a usar este termino para describir su trabajo, a mi parecer, con muy poca justificación." - Brian Randell

121
00:09:59,150 --> 00:10:00,170
es lapidario.

122
00:10:01,880 --> 00:10:11,190
Randell, por los siguientes 20 años aprox., declinó cualquier participación con el movimiento de la Ingeniería de software

123
00:10:11,190 --> 00:10:18,160
y rehusó participar en cualquier evento o cuerpo de trabajo que usara ese nombre.

124
00:10:21,270 --> 00:10:26,720
Lo que vemos es un poco de construcción de Imperio por la Academia

125
00:10:26,720 --> 00:10:28,840
si alguna vez han escuchado la cita ...

126
00:10:29,670 --> 00:10:33,880
¿Cuantos han estado involucrado en Academia, o en trabajo de post-grado?

127
00:10:34,000 --> 00:10:35,660
Quizás estén familiarizados con la cita

128
00:10:35,670 --> 00:10:41,000
"Las políticas de Academia son la forma más dañina y viciosa  de política debido a que involucra tan poco"

129
00:10:43,340 --> 00:10:44,870
pero no es tan simple

130
00:10:44,870 --> 00:10:51,180
lo que realmente estamos viendo es lo que me gusta llamar "Madurez prematura"

131
00:10:51,180 --> 00:10:54,290
El deseo de aparentar más maduro de lo que realmente eres ...

132
00:10:54,290 --> 00:10:57,680
Cualquiera que ha sido o conoce un adolescente está familiarizado con esto

133
00:11:00,110 --> 00:11:11,100
no puedes soportar verte inmaduro, así que actúas la madurez y al hacerlo imitas lo que hace la gente madura

134
00:11:11,100 --> 00:11:14,520
sin realmente entenderlos o entender por que

135
00:11:14,520 --> 00:11:19,370
y probablemente si notar alguna de las cosas menos obvias  que la gente madura hace

136
00:11:21,600 --> 00:11:26,780
y esto caracteriza mucho de lo que sucedió con la industria de software en sus inicios

137
00:11:26,780 --> 00:11:30,840
y esto resultó en la caricatura de la que comenté en un inicio.

138
00:11:32,240 --> 00:11:40,180
Voy a mostrarles algunas citas que expresan el carácter de la Ingeniería

139
00:11:40,190 --> 00:11:47,690
y creo que muchos de ustedes, si bien no habrán escuchado estas citas, habrán escuchado algo similar.

140
00:11:47,690 --> 00:11:52,380
y resonarán con ustedes respecto a la imagen de ingeniería que representan

141
00:11:52,380 --> 00:11:58,660
y contrastaré cada una con descripciones de verdaderos ingenieros

142
00:11:58,660 --> 00:12:00,830
o investigadores de la historia de la ingeniería

143
00:12:00,830 --> 00:12:03,570
acerca de lo que verdaderamente es la Ingeniería real

144
00:12:03,570 --> 00:12:08,590
me disculpo por toser en el micrófono, he estado enfermo la mayoría de la semana.

145
00:12:08,590 --> 00:12:15,940
solo hace dos años, Bruce Eckel, que es un programador muy inteligente

146
00:12:15,940 --> 00:12:19,260
de hecho creo que solo fue un poco descuidado con sus palabras

147
00:12:19,510 --> 00:12:24,250
pero sin embargo escribió esto en un post de su blog, así que puedo criticarlo por ello

148
00:12:24,250 --> 00:12:27,480
y creo que refleja la actitud que muchos programadores tienen.

149
00:12:27,480 --> 00:12:33,900
escribió: "La programación no es algún tipo de ingeniería (.. la burla es casi palpable allí)

150
00:12:33,900 --> 00:12:38,940
donde todo lo que debemos hacer es colocar algo en un extremo y girar la palanca" -Bruce Eckel

151
00:12:38,940 --> 00:12:45,280
¿Cuantos de aquí tienen formación en alguna Ingeniería en algún otro campo? ¿Alguien?

152
00:12:45,280 --> 00:12:46,780
solo algunos

153
00:12:46,780 --> 00:12:51,500
¿Hay algún tipo de Ingeniería en donde uno coloca algo por un extremo y gira la palanca?

154
00:12:54,190 --> 00:12:57,330
Otro ejemplo de este tipo de mal entendimiento

155
00:12:57,330 --> 00:13:04,450
es el "Proceso Racional de Diseño" que describe en un paper de 1986 por David Parnas

156
00:13:04,450 --> 00:13:07,860
para ser justos, David Parness no merece toda la culpa de esto

157
00:13:07,860 --> 00:13:12,850
porque lo estaba basando en algo llamado "El modelo racional de tomar decisiones"

158
00:13:13,160 --> 00:13:18,850
que viene de un libro de Hermet Simon de 1969 llamado "Las ciencias de lo Artificial"

159
00:13:20,260 --> 00:13:24,140
pero el proceso racional de diseño es lo que Parness describe

160
00:13:24,140 --> 00:13:28,610
primero: "Establecer y documentar requerimientos"

161
00:13:28,610 --> 00:13:32,080
luego: "Diseñar y documentar la estructura de modulos"

162
00:13:32,230 --> 00:13:35,510
y luego: "Documentar y diseñar las interfaces de los módulos"

163
00:13:36,530 --> 00:13:39,320
y luego: "Diseñar y documentar la jerarquía de usos"

164
00:13:39,360 --> 00:13:43,370
luego: "Diseñar y documentar las estructuras internas de los módulos"

165
00:13:43,370 --> 00:13:46,510
y finalmente: "Escribes programas"

166
00:13:46,510 --> 00:13:47,560
y Mantienes

167
00:13:53,600 --> 00:13:59,170
esto parece ridículo cuando es aplicado al software, pero la mayoría de nosotros si somos honestos

168
00:13:59,170 --> 00:14:05,810
en algún momento tuvimos en la mente de que esto es lo que un proceso de Ingeniería de software parecía

169
00:14:05,810 --> 00:14:11,250
Diseñar, diseñar,  diseñar,  diseñar,  diseñar y finalmente construir.

170
00:14:13,030 --> 00:14:17,390
Eugene Ferguson en su fabuloso libro "Engineering and the mind's eye"

171
00:14:17,390 --> 00:14:21,320
presenta una imagen mucho más realista

172
00:14:21,320 --> 00:14:22,670
del Ingeniero

173
00:14:22,670 --> 00:14:28,460
"La conversión de una idea a un artefacto, que involucra tanto al diseñador como al constructor

174
00:14:28,460 --> 00:14:36,140
es un proceso sutil y complejo que siempre va a estar más cerca del arte que de la ciencia" - Eugene S. Ferguson

175
00:14:36,140 --> 00:14:40,380
Voy a criticar un poco más a David Parnas

176
00:14:40,380 --> 00:14:46,990
algunos años en una charla que lo escuché dar dijo: "En Ingeniería, la gente diseña a través de la documentación"

177
00:14:46,990 --> 00:14:52,570
Y ciertamente los documentos son importantes como un registro del diseño

178
00:14:52,580 --> 00:14:58,660
pero aquí la insinuación es que la documentación es una parte esencial del proceso de diseño

179
00:15:00,240 --> 00:15:02,330
Yendo con Ferguson nuevamente,

180
00:15:02,330 --> 00:15:08,560
"Aunque los dibujos parezcan exactos y sin fallas, su precisión oculta muchas decisiones informales,

181
00:15:08,570 --> 00:15:16,240
apreciaciones dispersas, actos de intuición y asunciones acerca de como el mundo funciona" - Eugene S. Ferguson

182
00:15:21,210 --> 00:15:24,690
queda claro al ver la historia de la Ingeniería de software que

183
00:15:26,000 --> 00:15:33,920
que mucho de ella fue modelado al observar disciplinas ingenieriles particulares

184
00:15:33,920 --> 00:15:39,040
y en particular la más antigua, mejor conocida y probablemente la más diferente del desarrollo de sofware

185
00:15:39,040 --> 00:15:41,200
Ingeniería estructural

186
00:15:41,200 --> 00:15:50,010
y la ingeniería estructural tiene una fuerte inclinación sobre
lo que se conoce como el "Modelo de control para procesos definidos"

187
00:15:50,010 --> 00:15:57,960
"Requiere que cada pieza del trabajo sea completamente entendida.
Un proceso definido puede ser iniciado

188
00:15:58,000 --> 00:16:01,320
y permitir que se ejecute hasta que termine, con los mismos resultados cada vez."

189
00:16:01,320 --> 00:16:07,430
Esto se ajusta a nuestra percepción de como por ejemplo, los puentes son hechos

190
00:16:07,430 --> 00:16:16,190
y se ajusta muy bien a los procesos de software que aparecieron desde el
campo de la ingeniería de sofware

191
00:16:16,190 --> 00:16:23,500
pero la noción del modelos de control de procesos, fue originada por algunos
investigadores, ingenieros químicos

192
00:16:23,500 --> 00:16:31,420
quienes, cuando supieron que la ingeniería de software estaba fuertemente inclinada

193
00:16:31,420 --> 00:16:37,470
hacia este modelo de control de procesos, se asombraron, por decir lo menos

194
00:16:37,470 --> 00:16:44,430
porque la ingeniería química en sí, una rama madura y bien conocida de la ingeniería

195
00:16:44,430 --> 00:16:51,130
es de hecho, fuertemente inclinada hacia el extremo opuesto, hacia el modelo de control de procesos empiricos

196
00:16:51,130 --> 00:16:57,730
que "Provee y ejerce control mediante inspecciones frecuentes y adaptación para procesos que están imperfectamente definidos

197
00:16:57,770 --> 00:17:00,820
y generan resultados impredecibles e irrepetibles.

198
00:17:04,200 --> 00:17:07,770
esto parece mucho más apropiado para el desarrollo de software.

199
00:17:10,100 --> 00:17:14,750
mencioné previamente la conferencia sobre la historia de la ingeniería de software de 1996

200
00:17:14,750 --> 00:17:21,120
y en las actas de esa conferencia apareció este diagrama que creo describe

201
00:17:21,120 --> 00:17:26,090
la percepción que mucha gente tiene en los primeros días de cualquier campo

202
00:17:28,870 --> 00:17:34,180
empezamos con gente produciendo cosas y personas tratando de producirlo a un nivel

203
00:17:34,180 --> 00:17:37,230
un poco más alto, introduciendo nociones de "Oficio"

204
00:17:37,230 --> 00:17:41,500
y eventualmente esto se vuelve comercial, lucrativo y el dinero comienza a jugar un papel

205
00:17:41,500 --> 00:17:47,170
y en ese punto se vuelve necesario introducir CIENCIA

206
00:17:47,170 --> 00:17:53,750
y cuando tomamos todo aquello que aprendimos y lo mezclamos con CIENCIA

207
00:17:53,750 --> 00:18:00,200
es cuando terminamos con algo maduro y respetable llamado Ingeniería Profesional

208
00:18:00,200 --> 00:18:06,730
solo unas semanas atrás, Nick Morgan twiteó lo siguiente:

209
00:18:06,730 --> 00:18:11,060
He inventado un nuevo termino "Credibilidad Parasitaria", done ciertos campos intentan asociarse

210
00:18:11,060 --> 00:18:14,840
a la ciencia para parecer más reales.

211
00:18:14,840 --> 00:18:24,360
esto pasa hoy. Si les interesa esto en algo, serán familiares con SEMAT

212
00:18:24,370 --> 00:18:28,280
un grupo llamado Sofware Engineering Method and Theory
(Ingeniería, Métodos y Teoría de Software)

213
00:18:28,280 --> 00:18:30,490
originado por Ivar Jacobson

214
00:18:30,490 --> 00:18:38,100
y dedicado a la proposición que la ingeniería de software debe basarse en teoría científica sólida

215
00:18:38,100 --> 00:18:40,100
sino, obviamente, no sirve

216
00:18:40,100 --> 00:18:44,460
pero, esta nuca ha sido la perspectiva de la ingeniería

217
00:18:44,460 --> 00:18:53,040
e incluso afuera de una disciplina tan joven como el desarrollo de software, esta noción es muy polémica

218
00:18:53,040 --> 00:18:55,130
en el campo general de la ingeniería

219
00:18:55,130 --> 00:19:01,780
Fred Brooks cuando el era un estudiante de ingeniería en los '50 en Harvard

220
00:19:01,780 --> 00:19:05,600
en su libro "The Design of Design"
(El diseño del diseño)

221
00:19:05,600 --> 00:19:14,420
recuerda sus días en Harvard como un estudiante de ingeniería

222
00:19:14,420 --> 00:19:22,430
en ese momento el decano de ingeniería en Harvard era John van Vleck quien es un ganador del premio Novel
(Novel de Física 1977)

223
00:19:22,430 --> 00:19:26,790
y Brooks dice: "van Vleck estaba muy preocupado de que la práctica de la ingeniería

224
00:19:26,790 --> 00:19:29,040
fuera puesta sobre una base científica más firme."

225
00:19:29,040 --> 00:19:32,430
Nota: van Vleck era un físico, no un ingeniero

226
00:19:32,430 --> 00:19:37,700
(cita continúa) "lideró un gran cambio en la educación Americana de ingeniería, alejándose del diseño

227
00:19:39,050 --> 00:19:42,850
hacia la ciencia aplicada. El péndulo se osciló demasiado lejos; la reacción se afirmó

228
00:19:43,170 --> 00:19:46,530
y la enseñanza del diseño ha sido polémica desde ese momento.

229
00:19:46,530 --> 00:19:52,480
esta lucha se remonta incluso más atrás,  en 1923

230
00:19:52,480 --> 00:19:56,830
el ingeniero aeronáutico J. D. North en una carta hacia la Sociedad Real de Aeronáutica

231
00:19:56,830 --> 00:20:00,160
se mostraba enojado y dijo: "Los aeroplanos no son diseñados por la ciencia,

232
00:20:00,160 --> 00:20:05,260
sino por arte, a pesar de las pretensiones y patrañas que apuntan a lo contrario"

233
00:20:05,260 --> 00:20:12,990
"Hay un gran abismo entre la investigación científica y el producto de la ingeniería, que tiene que ser surcado por el arte del ingeniero".

234
00:20:15,060 --> 00:20:20,750
y finalmente otro ingeniero aeronáutica Walter Vincenti en su gran libro

235
00:20:20,750 --> 00:20:23,790
"What Engineers Know and How They Know It"
(Que es lo que los Ingenieros Saben y Cómo lo Saben)

236
00:20:23,790 --> 00:20:29,080
indica que: "Los Ingenieros" (no solo desarrolladores de software) "frecuentemente tienen que tomar desiciones

237
00:20:29,080 --> 00:20:35,550
de gran consecuencia práctica, debido a conocimiento incompleto e incierto" - Walter Vincenti

238
00:20:38,730 --> 00:20:43,670
aquí va algo que he escuchado frecuentemente sobre la ingeniería de software

239
00:20:43,670 --> 00:20:48,730
y sobre la manera inmadura en la que enfrentamos nuestro campo

240
00:20:48,730 --> 00:20:54,300
"No sabes si es cierto hasta que tienes la matemática para probarlo".

241
00:20:54,300 --> 00:21:02,050
No he podido encontrar una buena referencia en la literatura sobre la ingeniería de software que lo dice tan sucintamente

242
00:21:02,050 --> 00:21:05,580
si alguien llega a saber de alguna apreciaría que me lo contara

243
00:21:05,580 --> 00:21:09,190
pero sé que lo he leído y sé que me lo han dicho en varias discusiones

244
00:21:09,190 --> 00:21:16,140
que los verdaderos ingenieros usan las matemáticas para probar sus afirmaciones

245
00:21:16,140 --> 00:21:24,890
pero en la ingeniería aunque la matemática es usada bastante, no tiene el rol que los no-ingenieros creen que tiene

246
00:21:24,890 --> 00:21:33,120
volviendo al libro de Eugene Ferguson, "Análisis estructural (de hecho, cualquier cálculo ingenieril)

247
00:21:33,130 --> 00:21:39,010
debe ser utilizado con precaución y conciencia, ya que los modelos matemáticos son siempre menos complejos

248
00:21:39,010 --> 00:21:42,780
que las estructuras, procesos y máquinas reales.

249
00:21:43,780 --> 00:21:59,380
y he editado su cita un poco, debido a que estaba escrita en un inglés victoriano que es difícil de comprender

250
00:21:59,380 --> 00:22:04,240
en estos días, así que lo he adecuado un poco a nuestra época, pero esto es la esencia de lo que dijo:

251
00:22:04,240 --> 00:22:15,530
"La ingeniería no es el arte de construir. Sino es el arte de no construir; es el arte de hacer bien con un dólar lo que cualquier torpe haría con dos.

252
00:22:18,600 --> 00:22:28,780
He mencionado que las matemáticas y los formalismos, análisis formal en la ingeniería
no necesariamente tiene el rol que pensamos que tiene

253
00:22:28,780 --> 00:22:32,340
Exploremos el rol que tiene.

254
00:22:34,630 --> 00:22:42,910
Se que no fue gran cosa en su tiempo y que el Reino unido no tiene la cultura de comics en periódicos
que tiene USA

255
00:22:42,910 --> 00:22:47,790
pero creo que la mayoría de ustedes será familiar con la tira cómica "Calvin and Hobbs"

256
00:22:47,790 --> 00:22:55,310
Como un padre, me he modelado en el padre de Calvin, en que cuando mis hijos

257
00:22:55,310 --> 00:22:59,480
me preguntan algo sobre como funciona el mundo, me gusta inventar

258
00:22:59,480 --> 00:23:05,430
respuestas cómicas y altamente improbables y decirlas con cara seria, para ver que dicen.

259
00:23:05,430 --> 00:23:11,040
y una de mis tiras favoritas de "Calvin and Hobbs" tiene a Calvin preguntando:
"Papá, ¿Cómo saben la carga máxima de los puentes?"

260
00:23:11,040 --> 00:23:17,890
y el papá felizmente dice: "bueno, conducen camiones grandes y más grandes hasta que falla"

261
00:23:17,890 --> 00:23:23,890
"y luego pesan el camión más pesado que pasó y reconstruyen el puente"

262
00:23:23,890 --> 00:23:28,560
Calvin piensa que esto es perfectamente razonable.

263
00:23:28,560 --> 00:23:32,120
¿Por qué esto es tan gracioso?

264
00:23:32,120 --> 00:23:42,290
(publico) Porque es muy irracional
¡Porque es muy irracional, es ridículo!

265
00:23:42,290 --> 00:23:46,110
¡Nadie nunca haría eso!

266
00:23:46,110 --> 00:23:57,790
¿Cuántos de ustedes han visto el vídeo donde los ingenieros de Boing prueban las alas de un 777 hasta el punto de quiebre?

267
00:23:57,790 --> 00:23:59,750
si no lo han visto, vale la pena buscarlo

268
00:23:59,750 --> 00:24:04,610
a) porque los hará sentir muy seguros de subir a un 777

269
00:24:04,610 --> 00:24:12,290
b) porque es simplemente un notable vistazo acerca de como la ingeniería es hecha

270
00:24:12,290 --> 00:24:15,240
colocan el avión en un hangar gigante

271
00:24:15,240 --> 00:24:21,160
colocan cuerdas el en techo y las conectan con los bordes del ala

272
00:24:21,160 --> 00:24:26,270
y comienzan a tirar de las cuerdas hasta que ambas alas se quiebran.

273
00:24:27,420 --> 00:24:39,300
y cuando se quiebran, todos los ingenieros comienzan a sonreír, a felicitarse y a alegrarse.

274
00:24:42,570 --> 00:24:44,940
mi pregunta para ustedes es ¿Por qué?

275
00:24:46,190 --> 00:24:47,550
¿Alguien tiene idea?

276
00:24:48,200 --> 00:24:52,240
(publico) Porque lo habían predicho

277
00:24:52,240 --> 00:24:55,050
¡Porque lo habían predicho! ¡Si!

278
00:24:55,060 --> 00:24:58,860
porque sucedió al momento exacto que ellos predijeron

279
00:24:58,860 --> 00:25:04,310
Si las matemáticas prueban todo, ¿cual es el motivo para alegrarse?

280
00:25:04,310 --> 00:25:06,480
¡Porque no estaban seguros!

281
00:25:06,480 --> 00:25:10,800
Los modelos son siempre aproximaciones de la realidad

282
00:25:10,800 --> 00:25:12,300
no son la realidad

283
00:25:15,170 --> 00:25:18,850
así que ... ¿Por qué se utilizan modelos?

284
00:25:20,360 --> 00:25:25,160
Los modelos matemáticos fueron introducidos como una medida de reducción de costos.

285
00:25:27,010 --> 00:25:33,610
porque para construir un puente, solo para utilizar el ejemplo más común,

286
00:25:33,620 --> 00:25:36,060
y saber que es seguro

287
00:25:37,520 --> 00:25:42,280
sin modelos matemáticos solo hay dos opciones:

288
00:25:42,280 --> 00:25:45,650
1) El modo de Calvin and Hobbs

289
00:25:46,570 --> 00:25:50,000
... de construir un prototipo de tamaño real y probar

290
00:25:50,010 --> 00:25:54,530
incluso muchas veces quizás, si es que la primera vez no resulta como era esperado

291
00:25:54,540 --> 00:25:58,680
o bien, hacer algo muy por encima de lo necesario

292
00:26:00,370 --> 00:26:03,740
e incluso cuando se tienen modelos se debe hacer más de lo necesario

293
00:26:03,740 --> 00:26:11,070
debido a que existen margenes de error en los modelos

294
00:26:13,440 --> 00:26:17,750
El motivo de que los modelos matemáticos fueron introducidos es porque cuando se trabaja con materiales físicos

295
00:26:17,750 --> 00:26:23,490
especialmente en escalas grandes, hacer prototipos y probarlos es muy costoso

296
00:26:24,490 --> 00:26:32,620
así que en vez, podemos usar las matemáticas para probar modelos (en el sentido matemático)

297
00:26:32,620 --> 00:26:38,950
y ahorrarnos el esfuerzo en costos y tiempo de tener que construir la obra

298
00:26:39,860 --> 00:26:49,660
e incluso cuando tenemos modelos, tanto las fallas como el construir de más suceden

299
00:26:49,660 --> 00:26:52,930
un buen ejemplo es por aquí cerca en Ember

300
00:26:54,030 --> 00:27:03,890
en 1879 el puente Tay, no muy lejos de aquí, colapsó en un famoso desastre

301
00:27:03,890 --> 00:27:10,370
en donde la porción elevada que se ve en la imagen, colapsó en medio de una tormenta cuando cruzaba un tren

302
00:27:10,370 --> 00:27:13,910
y costó 75 vidas

303
00:27:15,860 --> 00:27:20,750
para cuando el desastre sucedió, había otro puente en la etapa de planificación

304
00:27:20,750 --> 00:27:22,480
sobre el río Firth of Forth

305
00:27:22,480 --> 00:27:29,070
y como una reacción al desastre del puente Tay

306
00:27:29,070 --> 00:27:35,980
el diseño del puente Forth fue modificado para ser más seguro, pero más importante

307
00:27:35,980 --> 00:27:38,700
para verse más seguro.

308
00:27:41,620 --> 00:27:53,300
El puente Forth fue el primer gran puente en ménsula de metal construido

309
00:27:53,300 --> 00:28:00,540
El diseño es simple, radicalmente distinto al puente Tay

310
00:28:01,420 --> 00:28:04,610
y realmente por encima de lo necesario

311
00:28:05,720 --> 00:28:10,340
tanto por propósitos ingenieriles, como también por propósitos de imágen

312
00:28:10,340 --> 00:28:12,340
no digo que sea malo

313
00:28:12,340 --> 00:28:16,810
creo que fue exactamente lo que había que hacer, me encanta este puente y creo que es muy bonito

314
00:28:18,190 --> 00:28:26,020
pero esto comenzó un proceso que duró aproximadamente 30 años de tratar de enteder

315
00:28:26,020 --> 00:28:32,930
la estática y la teoría física detrás de puentes en ménsula de acero como este

316
00:28:32,930 --> 00:28:36,950
y poder construir modelos matemáticos más precisos

317
00:28:36,950 --> 00:28:43,870
¿por qué la precisión era importante? Porque reduce la necesidad de ir por encima de lo necesario.

318
00:28:43,870 --> 00:28:50,100
y así reducir los materiales a usar y los costos en general de la construcción

319
00:28:51,520 --> 00:28:56,250
este es el puente Forth desde otro ángulo ...

320
00:28:56,250 --> 00:29:04,370
este proceso de 30 años, resultó en puentes más delgados, livianos y más adecuados a lo necesario

321
00:29:04,370 --> 00:29:07,830
que fueron construidos al rededor del mundo durante este periodo, hasta que

322
00:29:07,830 --> 00:29:11,340
el puente Quebec, que es bastante ligero

323
00:29:12,680 --> 00:29:15,800
colapsó.

324
00:29:17,000 --> 00:29:20,240
también con la pérdida de muchas vidas.

325
00:29:20,240 --> 00:29:24,130
luego que el puente Quebec colapsara en 1907

326
00:29:24,130 --> 00:29:32,070
los puentes en ménsula fueron vistos como inseguros, así que comenzamos a construir puentes colgantes
y el ciclo se comenzó a repetir

327
00:29:32,070 --> 00:29:38,620
Grandes opulentos e inmensos puentes fueron construidos y gradualmente comenzaron a hacerse ligeros y livianos hasta que

328
00:29:38,630 --> 00:29:43,030
por supuesto, el puente de Tacoma Narrows, terminó la era de los puentes colgantes

329
00:29:45,220 --> 00:29:52,580
En el caso del puente Tacoma Narrows la falla puede rastrearse directamente a un modelo matemático con errores.

330
00:29:52,590 --> 00:29:58,460
que hasta el momento era mayoritariamente considerado el mejor modelo disponible para puentes colgantes

331
00:30:01,850 --> 00:30:09,830
Busqué definiciones de ingeniería previas a la ingeniería de software y esta me gusta por un motivo

332
00:30:09,830 --> 00:30:13,930
esta del instituto de ingenieros civiles de 1828

333
00:30:13,930 --> 00:30:21,140
"La ingeniería es el arte de dirigir grandes cursos de poder para el uso y conveniencia del hombre"

334
00:30:21,140 --> 00:30:24,360
me gusta, pero me parece un poco colonial

335
00:30:25,560 --> 00:30:29,860
una más reciente de la asociación de ingenieros estructurales es:

336
00:30:29,860 --> 00:30:34,600
"La ingeniería estructural es la ciencia y arte de diseñar y construir, con economía y elegancia

337
00:30:34,610 --> 00:30:39,640
estructuras, para que puedan resistir de manera segura las fuerzas a las cuales puedan ser sujetas"

338
00:30:39,640 --> 00:30:43,490
Me gustaría que examináramos las tensiones de esta definición:

339
00:30:43,490 --> 00:30:47,900
La ingeniería es una ciencia y un arte

340
00:30:49,720 --> 00:31:01,360
involucra creatividad, caminos sin salida, exploración, descubrimiento; de la misma forma que involucra aplicar los
descubrimientos de la ciencia.

341
00:31:02,420 --> 00:31:05,540
involucra diseñar y construir

342
00:31:05,540 --> 00:31:11,560
los ingenieros no solo construyen documentos y los entregan a otra gente para que construlla

343
00:31:11,560 --> 00:31:17,970
se involucran en la construcción de las cosas que diseñan y en las instalaciones de fabricación

344
00:31:17,970 --> 00:31:26,000
los buenos ingenieros estructurales tienen cascos en sus oficinas porque van a terreno y hablan con los constructores

345
00:31:26,000 --> 00:31:31,810
y se enteran de los nuevos problemas que se encuentran durante la construcción

346
00:31:33,000 --> 00:31:35,760
... con economía y elegancia

347
00:31:35,760 --> 00:31:44,380
el costo es siempre un gran tema en la ingeniería, nuestro trabajo no es solo construir algo

348
00:31:44,380 --> 00:31:53,550
sino que hacerlo en la forma más económica posible balanceando economía, elegancia y robustez

349
00:31:54,550 --> 00:31:58,230
otra cosa que podemos encontrar mirando a disciplinas reales de la ingeniería

350
00:31:58,230 --> 00:32:01,610
es que disciplinas distintas, son muy distintas

351
00:32:01,620 --> 00:32:08,990
cuando se mira a la ingeniería estructural o la ingeniería eléctrica, mecánica, industrial o química

352
00:32:08,990 --> 00:32:16,330
se observa que utilizan distintos materiales, emplean distintos efectos físicos y trabajan con fuerzas distintas

353
00:32:17,460 --> 00:32:25,290
trabajan con distintos grados de complejidad en relación a los requerimientos, los diseños, los procesos que utilizan

354
00:32:25,290 --> 00:32:27,770
y los artefactos que son el producto final

355
00:32:28,590 --> 00:32:33,810
diferentes disciplinas de la ingeniería tienen distintos grados de depender en modelos formales

356
00:32:34,750 --> 00:32:38,640
y si no, dependen de experimentación, prototipado y pruebas

357
00:32:41,790 --> 00:32:45,800
los ingenieros estructurales no construyen muchos modelos físicos de puentes

358
00:32:46,500 --> 00:32:52,120
pero los ingenieros eléctricos construyen muchos prototipos en placas de ensayo

359
00:32:52,120 --> 00:32:57,420
pregúntenle a su colega ingeniero aeronáutico cuánta matemática utilizarían

360
00:32:57,420 --> 00:33:03,220
si construir y probar modelos físicos reales de sus diseños fuera instantáneo y gratis

361
00:33:04,530 --> 00:33:09,580
La respuesta no va a ser "Nada", pero sería mucho menos de lo que hacen ahora.

362
00:33:10,500 --> 00:33:16,990
finalmente, tienen distintos grados de procesos empíricos o definidos

363
00:33:16,990 --> 00:33:21,330
así que si entendemos lo que la ingeniería realmente es y tratamos de aplicarlo a lo que nosotros

364
00:33:21,330 --> 00:33:27,350
como profesionales de software sabemos sobre el campo de desarrollo de software... ¿Con que terminaríamos?

365
00:33:27,350 --> 00:33:32,850
Bueno, antes que todo tomaré la definición de ingeniería de la asociación de ingenieros estructurales

366
00:33:32,850 --> 00:33:39,260
y la modificaré un poco para hacer mi propia visión de la ingeniería de software

367
00:33:39,260 --> 00:33:49,790
"Es la ciencia y el arte de diseñar y hacer con economía y elegancia, sistemas para que puedan rápidamente adaptase a las situaciones que se puedan presentar"

368
00:33:49,790 --> 00:33:57,480
Esto incorpora la idea de que uno de los grandes beneficios del software es que es "soft" (maleable)

369
00:33:57,480 --> 00:34:02,730
El objetivo no es resistir fuerzas, el objetivo es adaptarse al cambio

370
00:34:02,730 --> 00:34:09,880
aparte de eso, creo que la definición de los ingenieros estructurales es bien buena.

371
00:34:09,880 --> 00:34:18,130
sabemos que la ingeniería de software se espera sea muy distinta de las otras disciplinas, así que no debiéramos

372
00:34:18,140 --> 00:34:26,260
terminar con una copia de la ingeniería estructural, o una caricatura de alguna otra disciplina que comprendamos o creemos que comprendemos.

373
00:34:27,940 --> 00:34:40,560
La ingeniería de software fue basada en una analogía sobre disciplinas de la ingeniería de lo físico

374
00:34:40,750 --> 00:34:42,860
y esta analogía es algo así:

375
00:34:42,860 --> 00:34:45,670
tienes ingenieros

376
00:34:46,550 --> 00:34:49,020
se sientan con sus camisas blancas y corbatas

377
00:34:49,020 --> 00:34:51,690
y producen diseños

378
00:34:51,690 --> 00:34:55,890
y estos diseños son luego entregados a trabajadores

379
00:34:55,890 --> 00:35:00,620
quienes usan el diseño para construir el producto final

380
00:35:02,380 --> 00:35:06,960
por analogía, si queremos ver el mundo del desarrollo de software

381
00:35:06,970 --> 00:35:15,530
y queremos aprender de las disciplinas de ingeniería existentes debiéramos hacer el software así:

382
00:35:15,540 --> 00:35:18,020
tenemos ingenieros de software

383
00:35:18,020 --> 00:35:20,140
el mismo tipo, pero ahora re capacitado

384
00:35:20,140 --> 00:35:23,680
que produce un diseño

385
00:35:23,680 --> 00:35:27,620
que luego es entregado a trabajadores en sus cubículos

386
00:35:28,730 --> 00:35:32,560
que producen el producto final

387
00:35:34,740 --> 00:35:40,880
y luego que lo hemos colocado de esta forma, es difícil mirar a cualquier discusión sobre ingeniería de software

388
00:35:40,890 --> 00:35:45,220
entre 1969 y a mediados de los 90

389
00:35:45,220 --> 00:35:51,930
sin ver esta analogía brillando fuerte y claro en cada una de las asunciones que se hacen

390
00:35:51,930 --> 00:35:59,960
pero en 1992 creo, un caballero llamado Jack Reeves

391
00:35:59,960 --> 00:36:04,660
se dio cuenta que esta analogía esta completamente equivocada

392
00:36:04,660 --> 00:36:09,670
y escribió un paper llamado "¿Qué es Diseño de Software?" y lo publicó en el reporte C++

393
00:36:09,670 --> 00:36:14,260
que es el motivo por el cual muchos de ustedes, aunque debieran, no han escuchado de el

394
00:36:15,410 --> 00:36:20,700
dijo: esta analogía está completamente equivocada, porque faltan cosas fundamentales sobre el desarrollo de software

395
00:36:20,700 --> 00:36:25,710
esto es lo que harías si no supieras nada sobre desarrollo de software

396
00:36:25,710 --> 00:36:30,220
pero si eres un programador, sabes como las cosas funcionan y sabes que está equivocado

397
00:36:30,230 --> 00:36:37,140
y el primer problema es que nunca hemos podido lograr una forma de expresar un diseño de software

398
00:36:37,960 --> 00:36:46,420
que forma económica y fiable los programadores puedan llegar y convertir en un programa funcional

399
00:36:46,420 --> 00:36:54,820
y a lo mejor esta es parte del problema, debiéramos cambiar nuestra percepción de lo que es el diseño de software

400
00:36:55,820 --> 00:37:11,390
y esto que está aquí, este código fuente, no es el producto final, no es lo que el cliente nos paga por hacer

401
00:37:12,100 --> 00:37:21,420
los clientes nos pagan para producir programas funcionales instalado en las máquinas, no archivos de texto en alguna carpeta

402
00:37:21,420 --> 00:37:27,370
de hecho este código fuente es el diseño de nuestro software

403
00:37:28,040 --> 00:37:40,240
a lo mejor no es todo el diseño, aun ayuda tener diagramas para la vista general del diseño, pero el detalle, las minucias de como funciona, es el código fuente

404
00:37:40,240 --> 00:37:45,400
así que, ¿Quienes serían los trabajadores? ¿a quien le correspondería esta tarea?

405
00:37:45,400 --> 00:37:49,330
A los compiladores y a las implementaciones de lenguajes y a los frameworks de alto nivel

406
00:37:49,330 --> 00:37:57,790
y el producto final es una solución funcional ejecutables en máquinas que usuarios pueden usar

407
00:37:58,880 --> 00:38:02,970
una vez que ves esto, ¡todo cambia!

408
00:38:03,660 --> 00:38:07,260
¿Cuál es la parte más costosa de la parte superior?

409
00:38:08,960 --> 00:38:11,640
La construcción.

410
00:38:11,640 --> 00:38:14,980
¿Cuál es la parte más económica de la fila inferior?

411
00:38:14,980 --> 00:38:15,980
La construcción.

412
00:38:18,850 --> 00:38:31,830
y esta economía invertida cambia todo sobre lo que debemos hacer y si algo quiere llamarse "Ingeniería de software" debe tomar en consideración

413
00:38:31,830 --> 00:38:39,960
este hecho fundamental, que para nosotros, construir un prototipo de nuestro diseño es efectivamente instantáneo y gratuito.

414
00:38:41,460 --> 00:38:54,110
y aún más, cuando Reeves escribió su paper, probar el prototipo era costoso (aunque nunca tanto como probar un puente)

415
00:38:54,110 --> 00:39:03,720
pero desde esa época hemos aprendido un montón sobre reducir el costo de pruebas repetitivas de los diseños. ¿O no?

416
00:39:03,720 --> 00:39:18,920
así que por mucho, la parte más costosa de NUESTRO campo es el diseño. Es tanto así que eclipsa a todo lo demás y lo hace ver insignificante.

417
00:39:21,430 --> 00:39:31,060
Otra cosa que me gustaría decir, aunque somos constantemente criticados por no tener rigor matemático en nuestro campo

418
00:39:33,020 --> 00:39:37,130
Ese código fuente es matemática.

419
00:39:37,440 --> 00:39:47,680
Incluso si nuestros lenguajes de programación no tienen una notación  rigurosa o algún otro mecanismo formal (y eso es Ruby a si que ciertamente no)

420
00:39:48,720 --> 00:39:53,250
es un lenguaje formal, con semánticas rígidas

421
00:39:54,660 --> 00:40:02,740
usamos matemática todos los días, nuestra matemática trabaja para nosotros, nuestra matemática es ejecutable.

422
00:40:03,090 --> 00:40:09,310
Y esto fue entendido hace tiempo, tanto como la conferencia NATO de 1968

423
00:40:09,310 --> 00:40:18,000
en la conferencia Friedrich Bauer dijo: "lo necesario no es matemática clásica, solo matemática"

424
00:40:18,000 --> 00:40:24,710
y Edsger Dijkstra, que era un fuerte proponente de usar pruebas matemáticas formales para el software

425
00:40:25,670 --> 00:40:32,080
aun inició su discurso diciendo: "Nuestras herramientas básicas son esencialmente matemáticas"

426
00:40:34,690 --> 00:40:35,860
una cosa más

427
00:40:37,340 --> 00:40:45,150
En la imagen anterior, ¿Dónde está el modelo?

428
00:40:54,590 --> 00:40:57,320
¿Dónde está el modelo?, ¿Dónde está nuestro modelo?

429
00:41:04,810 --> 00:41:09,940
Está parcialmente en nuestras mentes, si, pero lo mismo es cierto de otras diciplinas

430
00:41:11,090 --> 00:41:15,500
La expresión del modelo también está en el código fuente.

431
00:41:17,950 --> 00:41:30,920
Y que tan fácil el modelo se puede ver en el código fuente, es una de las métricas con las que se puede medir el diseño en sí

432
00:41:32,690 --> 00:41:35,160
¿Dónde están nuestros documentos?

433
00:41:35,650 --> 00:41:41,410
Los ingenieros usan modelos, matemática y documentos. ¿Dónde está nuestro documento?

434
00:41:41,410 --> 00:41:43,040
En el código fuente.

435
00:41:44,540 --> 00:41:51,140
mencioné con anterioridad que Parnas dijo que los ingenieros diseñan mediante documentos.

436
00:41:51,140 --> 00:42:01,610
y ha propuesto una notación matemática para los documentos llamada "expresiones matemáticas tabulares" para expresar requerimientos y diseños

437
00:42:01,610 --> 00:42:11,830
y sería injusto mostrarles el siguiente ejemplo sin decirles que es un ejemplo groseramente simplificado de una expresión matemática tabular

438
00:42:11,830 --> 00:42:20,910
pero sin embargo, transmite la idea,esto es un ejemplo muy simplificado de lo que sería una expresión matemática tabular de Parnes

439
00:42:20,920 --> 00:42:23,830
porque el piensa que necesitamos tener documentos

440
00:42:30,160 --> 00:42:38,920
Les mostraré otros documentos, que expresan el mismo requerimiento de otra forma:

441
00:42:38,920 --> 00:42:40,240
este es uno

442
00:42:50,530 --> 00:42:50,560
aquí hay otro

443
00:42:53,390 --> 00:42:54,570
y otro

444
00:42:56,980 --> 00:42:58,550
y otro

445
00:42:58,550 --> 00:43:01,190
que extrañamente empieza a verse como el original de Parnes

446
00:43:01,190 --> 00:43:09,640
tenemos una prueba unitaria, una especificación de RSpec, un escenario de Cucumber y un arreglo de Fitnes

447
00:43:11,460 --> 00:43:16,190
¿Qué es distinto de estos documentos y los de Parnes?

448
00:43:18,690 --> 00:43:20,020
Estos son ejecutables.

449
00:43:20,030 --> 00:43:23,170
Pueden ejecutarse y verificarse

450
00:43:25,290 --> 00:43:29,580
Son documentos, pero no son SOLO documentos

451
00:43:31,690 --> 00:43:37,270
Si ejecutas cada uno, encontrarás que hay un error.

452
00:43:51,250 --> 00:43:58,130
Finalmente, procesos empíricos versus procesos definidos

453
00:43:58,140 --> 00:44:04,570
Este es un diagrama de las 12 o 13 prácticas originales que describió Extreme Programming

454
00:44:04,570 --> 00:44:12,980
y las dependencias entre ellas que Kent Beck documenta en su libro "Extreme Programming Explained"

455
00:44:12,980 --> 00:44:26,270
y hay un capítulo entero en su libro que dice "Unit testing no puede funcionar porque X, Y, Z; tiene defectos"

456
00:44:26,270 --> 00:44:34,360
y sería cierto excepto  que estas otras prácticas: Integración Continua, Pertenencia colectiva, semanas de 40 horas, trabajo en pares, refactoring, etc

457
00:44:34,360 --> 00:44:39,600
apoyan y soportan esto, retribuyen por sus defectos como redundancia en el proceso

458
00:44:39,600 --> 00:44:49,360
y yo miro el diagrama e inspirado por un comentario de Dave Thomas, miro el diagrama y digo "Si hubiera hecho un diseño de software tan acoplado"

459
00:44:49,360 --> 00:44:50,610
me despedirían

460
00:44:51,460 --> 00:44:58,940
osea, hay verdad en esto, pero buscaba una estructura más profunda.

461
00:44:59,970 --> 00:45:06,530
resulta que muchas de estas dependencias pueden entenderse en esta forma

462
00:45:06,660 --> 00:45:12,190
puedes colocar la mayoría de estas prácticas (las otras son solo estándares)

463
00:45:12,190 --> 00:45:22,910
la que son realmente prácticas, las puedes alinear de acuerdo a la escala del contexto, de la decisión sobre la que actúan

464
00:45:22,910 --> 00:45:28,780
cuando realizas programación en pares estás principalmente actuando sobre métodos e instrucciones

465
00:45:28,780 --> 00:45:32,980
y las pruebas unitarias actúan principalmente sobre métodos, clases e interfaces

466
00:45:32,980 --> 00:45:41,450
y así se sube hasta "publicaciones frecuentes" para validar que produces la solución correcta al problema del cliente

467
00:45:41,450 --> 00:45:50,780
Y, interesantemente, puedes asociar cada práctica en una escala de tiempo sobre el cual actúan estas prácticas.

468
00:45:50,790 --> 00:45:59,450
la programación por pares funciona al nivel de segundos y aveces minutos, pruebas unitarias actúan al nivel de minutos

469
00:46:01,250 --> 00:46:07,590
"Cliente in-situ" actúa en el nivel de las horas, ya que discutes con él detalles de los requerimientos y todo eso

470
00:46:07,590 --> 00:46:13,880
llegando hasta arriba con "Publicaciones frecuentes" donde se toma semanas o meses en muchos casos

471
00:46:15,520 --> 00:46:21,570
Esto es prácticamente la definición del un proceso empírico para desarrollo de software

472
00:46:22,020 --> 00:46:35,190
obtiene información sobre cada decisión que se hace en cada etapa en la forma más rápida que es económicamente factible

473
00:46:35,650 --> 00:46:43,530
es costoso obtener información sobre grandes decisiones, así que no lo hacemos tan seguido, pero aun lo hacemos lo más rápido posible

474
00:46:46,440 --> 00:46:48,560
pero es muy económico obtener información sobre pequeñas decisiones así que lo hacemos cada segundo

475
00:46:49,690 --> 00:46:57,990
Constantemente obteniendo información y ajustándose tal como un proceso empírico debiera

476
00:46:59,090 --> 00:47:06,120
El desarrollo de software ágil ha sido acusado de ser ad-hoc, descuidado y desordenado,

477
00:47:06,120 --> 00:47:14,440
pero de hecho, yo creo que es una gran representación de lo que un proceso ingenieril para software debiera ser.

478
00:47:14,440 --> 00:47:29,960
estoy un poco pasado de tiempo, pero quiero mostrarles lo que me imagino seremos cuando finalmente maduremos

479
00:47:32,650 --> 00:47:41,160
No necesitaremos matemática, no necesitaremos modelos, no necesitaremos documentos.

480
00:47:41,160 --> 00:47:45,710
y ciertamente no necesitaremos copiar otras disciplinas que no entendemos.

481
00:47:47,000 --> 00:47:52,540
sino que aprenderemos de profesionales del campo sobre lo que funciona y no funciona

482
00:47:53,870 --> 00:48:01,130
nos inclinaremos hacia un modelo empírico ya que eso es lo apropiado para un campo tan complejo donde hay tanto por conocer

483
00:48:02,640 --> 00:48:10,510
Continuaremos promoviendo innovación en los procesos, no creo que XP o la Agilidad sea la última palabra, creo que aun tenemos mucho que aprender

484
00:48:11,610 --> 00:48:17,640
y nos aseguraremos que solo aquello que funciona, sea llamado Ingeniería.

485
00:48:17,640 --> 00:48:20,430
y dejaremos de usar ese termino para cosas que no funcionan

486
00:48:22,430 --> 00:48:23,620
Gracias

487
00:48:23,620 --> 00:48:29,220
Subtítulos por David Lay M.

